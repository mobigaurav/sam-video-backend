AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Video management backend with AWS SAM

Resources:
  # DynamoDB Table for Video Metadata
  VideoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VideoTable
      AttributeDefinitions:
        - AttributeName: SellerId
          AttributeType: S
        - AttributeName: VideoId
          AttributeType: S
      KeySchema:
        - AttributeName: SellerId
          KeyType: HASH
        - AttributeName: VideoId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # S3 Bucket for Video Storage (Without Notification)
  VideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: foodvideobucketnew

  ThumbnailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: foodvideobucket-thumbnails

  # IAM Role for Lambda Function
  VideoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VideoDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource: !GetAtt VideoTable.Arn

        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

        - PolicyName: VideoS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${VideoBucket}/*"
                  - !Sub "arn:aws:s3:::${VideoBucket}"

  # API Gateway (REST API)
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # Lambda Function (Handles API Requests Only)
  VideoBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs22.x
      CodeUri: ./src
      Role: !GetAtt VideoLambdaRole.Arn
      Timeout: 200
      MemorySize: 1024 
      Layers:
        - arn:aws:lambda:us-east-1:362896113754:layer:ffmpeg:6
      Environment:
        Variables:
          VIDEO_TABLE: !Ref VideoTable
          VIDEO_BUCKET: !Ref VideoBucket
          THUMBNAIL_BUCKET: !Ref ThumbnailBucket
      Events:
        GetVideos:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /videos
            Method: GET
        DeleteVideos:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /videos
            Method: DELETE
        GetPreSignedUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /presigned-url
            Method: POST

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  PreSignedUrlApi:
    Description: "API Gateway endpoint for requesting pre-signed URLs"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/presigned-url"
